add_filter( 'woocommerce_cart_tax_totals', 'change_decimals_cart_tax_totals', 20, 2 );
function change_decimals_cart_tax_totals( $tax_totals, $cart ){
    $decimals = array('decimals' => 2);

    $taxes      = $cart->get_taxes();
    $tax_totals = array();

    foreach ( $taxes as $key => $tax ) {
        $code = WC_Tax::get_rate_code( $key );

        if ( $code || $key === apply_filters( 'woocommerce_cart_remove_taxes_zero_rate_id', 'zero-rated' ) ) {
            if ( ! isset( $tax_totals[ $code ] ) ) {
                $tax_totals[ $code ] = new stdClass();
                $tax_totals[ $code ]->amount = 0;
            }
            $tax_totals[ $code ]->tax_rate_id       = $key;
            $tax_totals[ $code ]->is_compound       = WC_Tax::is_compound( $key );
            $tax_totals[ $code ]->label             = WC_Tax::get_rate_label( $key );
            $tax_totals[ $code ]->amount           += wc_round_tax_total( $tax );
            $tax_totals[ $code ]->formatted_amount  = wc_price( wc_round_tax_total( $tax_totals[ $code ]->amount ), $decimals );
        }
    }

    if ( apply_filters( 'woocommerce_cart_hide_zero_taxes', true ) ) {
        $amounts    = array_filter( wp_list_pluck( $tax_totals, 'amount' ) );
        $tax_totals = array_intersect_key( $tax_totals, $amounts );
    }
    return $tax_totals;
}

add_filter( 'woocommerce_cart_totals_order_total_html', 'change_decimals_cart_totals_order_total_html', 20, 1 );
function change_decimals_cart_totals_order_total_html( $formatted_price ){
    $decimals = array('decimals' => 2);

    $value = '<strong>' . wc_price( WC()->cart->get_total('edit'), $decimals ) . '</strong> ';

    // If prices are tax inclusive, show taxes here.
    if ( wc_tax_enabled() && WC()->cart->display_prices_including_tax() ) {
        $tax_string_array = array();
        $cart_tax_totals  = WC()->cart->get_tax_totals();

        if ( get_option( 'woocommerce_tax_total_display' ) == 'itemized' ) {
            foreach ( $cart_tax_totals as $code => $tax ) {
                $tax_string_array[] = sprintf( '%s %s', $tax->formatted_amount, $tax->label );
            }
        } elseif ( ! empty( $cart_tax_totals ) ) {
            $tax_string_array[] = sprintf( '%s %s', wc_price( WC()->cart->get_taxes_total( true, true ), $decimals ), WC()->countries->tax_or_vat() );
        }

        if ( ! empty( $tax_string_array ) ) {
            $taxable_address = WC()->customer->get_taxable_address();
            $estimated_text  = WC()->customer->is_customer_outside_base() && ! WC()->customer->has_calculated_shipping()
                ? sprintf( ' ' . __( 'estimated for %s', 'woocommerce' ), WC()->countries->estimated_for_prefix( $taxable_address[0] ) . WC()->countries->countries[ $taxable_address[0] ] )
                : '';
            $value .= '<small class="includes_tax">' . sprintf( __( '(includes %s)', 'woocommerce' ), implode( ', ', $tax_string_array ) . $estimated_text ) . '</small>';
        }
    }
    return $value;
}


add_action( 'wp_footer', 'cart_update_qty_script' );
function cart_update_qty_script() {    
    ?>
    <script type="text/javascript">

    	jQuery(document).ready(function(){
	        (function($){

	        	update_cart_decimals();

	        	$( document.body ).on( 'update_checkout', function(){
				    //re-do your jquery
				    var refreshId = setInterval(function(){ update_cart_decimals();
				    	var remove = jQuery('#order_review .blockUI').length;
				    	if (remove == 0) {
				    		clearInterval(refreshId);
				    	}
				    	//console.log(remove);
				     }, 20);
				    
				});

	            $( document.body ).on( 'updated_cart_totals', function(){
				    //re-do your jquery
				    update_cart_decimals();
				});

	        })(jQuery);
    	});

        function update_cart_decimals(){


        	jQuery('.woocommerce-Price-amount.amount').each(function( index ) {
        		var old_price = jQuery(this).find('.none>span').clone()
					.children()
					.remove()
					.end()
					.text();

				var tmp = parseFloat(old_price);

				var new_price = tmp.toFixed(2);

				var html = jQuery(this).html();
				html = html.replace(old_price, new_price);

				jQuery(this).html(html);
				//console.log( index + ": " + new_price );
        	});					    

        }

        function round(value, exp) {
		  if (typeof exp === 'undefined' || +exp === 0)
		    return Math.round(value);

		  value = +value;
		  exp = +exp;

		  if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0))
		    return NaN;

		  // Shift
		  value = value.toString().split('e');
		  value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp)));

		  // Shift back
		  value = value.toString().split('e');
		  return +(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp));
		}

    </script>
    <?php
}
